# -*- coding: utf-8 -*-
"""clean weather.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XqTlQQGUS9m1grCEgwh0P92I1vYRCKkJ
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing necessary libraries
import pandas as pd  # For data manipulation and analysis
import numpy as np  # For numerical computations
import matplotlib.pyplot as plt  # For data visualization
# Ensures that plots are displayed inline in Jupyter Notebook
# %matplotlib inline
import seaborn as sns  # For enhanced data visualization and statistical plotting

# Setting Pandas options to format float numbers to 2 decimal places
pd.options.display.float_format = '{:.2f}'.format

import os
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('weather_data.csv')  # The name must match the uploaded file
df.head()

df.info()

df.columns

df.isnull().sum()

df.describe().T

# Convert the date column to a consistent format
df['date'] = pd.to_datetime(df['date'], errors='coerce')
# Sort data by date for proper interpolation
df.sort_values(by=['city', 'date'], inplace=True)

# Fill missing dates using forward-fill and backward-fill
df['date'].ffill(inplace=True)
df['date'].bfill(inplace=True)

# Interpolate missing temperature values for smooth trends
df['temperature_celsius'] = df.groupby('city')['temperature_celsius'].apply(lambda x: x.interpolate(method='linear')).reset_index(level=0, drop=True)
# Replace missing humidity & wind speed values with the median per city
df['humidity_percent'] = df.groupby('city')['humidity_percent'].transform(lambda x: x.fillna(x.median()))
df['wind_speed_kph'] = df.groupby('city')['wind_speed_kph'].transform(lambda x: x.fillna(x.median()))

# Forward-fill and backward-fill missing values
df['weather_condition'] = df['weather_condition'].ffill()
df['weather_condition'] = df['weather_condition'].bfill()

# If some values are still missing, replace them with the most frequent weather condition per city
df['weather_condition'] = df.groupby('city')['weather_condition'].transform(lambda x: x.fillna(x.mode()[0] if not x.mode().empty else "Unknown"))

# Convert temperature from Celsius to Fahrenheit
df['temperature_fahrenheit'] = df['temperature_celsius'] * 9/5 + 32

# Display updated data with new column
print("Updated Data Preview:")
print(df.head())

# Remove rows where weather_condition is 'Unknown' or missing
df = df[df['weather_condition'].notna()]  # Remove NULL values
df = df[df['weather_condition'] != "Unknown"]  # Remove 'Unknown'

# Confirm filtered data
print(f"Remaining rows after filtering: {len(df)}")
print(df.head())

# Ensure the 'outputs' folder exists
os.makedirs("outputs", exist_ok=True)

# Save transformed data as CSV
df.to_csv("outputs/transformed_weather_data.csv", index=False)

print("Transformed weather data saved successfully!")

# Compute average temperature per city for all cities
avg_temp_all_cities = df.groupby('city')['temperature_celsius'].mean().sort_values(ascending=False)

# Save report as a text file
report_path = "outputs/weather_report.txt"
with open(report_path, "w") as f:
    f.write("Average Temperature per City:\n")
    f.write(str(avg_temp_all_cities))

print("Weather report with all cities generated successfully!")

plt.figure(figsize=(10,5))
sns.barplot(x=top_cities.index, y=top_cities.values)
plt.title("Top 5 Cities with Highest Average Temperature")
plt.xlabel("City")
plt.ylabel("Average Temperature (째C)")
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8,5))
sns.scatterplot(x=df['temperature_celsius'], y=df['humidity_percent'])
plt.title("Temperature vs Humidity")
plt.xlabel("Temperature (째C)")
plt.ylabel("Humidity (%)")
plt.show()

plt.figure(figsize=(8,5))
sns.scatterplot(x=df['temperature_celsius'], y=df['wind_speed_kph'])
plt.title("Temperature vs Wind Speed")
plt.xlabel("Temperature (째C)")
plt.ylabel("Wind Speed (kph)")
plt.show()

# Compute average temperature per city
avg_temp = df.groupby("city")["temperature_celsius"].mean()

# Create the bar chart
plt.figure(figsize=(10,5))
sns.barplot(x=avg_temp.index, y=avg_temp.values, palette="coolwarm")

# Add labels and title
plt.title("Average Temperature per City")
plt.xlabel("City")
plt.ylabel("Average Temperature (째C)")
plt.xticks(rotation=45)

# Save the figure
plt.savefig("outputs/average_temperature_chart.png")
plt.show()